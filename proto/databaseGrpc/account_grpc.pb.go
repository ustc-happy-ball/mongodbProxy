// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package databaseGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	AccountFindByPhone(ctx context.Context, in *AccountFindByPhoneRequest, opts ...grpc.CallOption) (*AccountFindByPhoneResponse, error)
	AccountAdd(ctx context.Context, in *AccountAddRequest, opts ...grpc.CallOption) (*AccountAddResponse, error)
	AccountFindPlayerByAccountId(ctx context.Context, in *AccountFindPlayerByAccountIdRequest, opts ...grpc.CallOption) (*AccountFindPlayerByAccountIdResponse, error)
	AccountGetAccountByPlayerId(ctx context.Context, in *AccountGetAccountInfoByPlayerIdRequest, opts ...grpc.CallOption) (*AccountGetAccountInfoByPlayerIdResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) AccountFindByPhone(ctx context.Context, in *AccountFindByPhoneRequest, opts ...grpc.CallOption) (*AccountFindByPhoneResponse, error) {
	out := new(AccountFindByPhoneResponse)
	err := c.cc.Invoke(ctx, "/databaseGrpc.AccountService/AccountFindByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountAdd(ctx context.Context, in *AccountAddRequest, opts ...grpc.CallOption) (*AccountAddResponse, error) {
	out := new(AccountAddResponse)
	err := c.cc.Invoke(ctx, "/databaseGrpc.AccountService/AccountAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountFindPlayerByAccountId(ctx context.Context, in *AccountFindPlayerByAccountIdRequest, opts ...grpc.CallOption) (*AccountFindPlayerByAccountIdResponse, error) {
	out := new(AccountFindPlayerByAccountIdResponse)
	err := c.cc.Invoke(ctx, "/databaseGrpc.AccountService/AccountFindPlayerByAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountGetAccountByPlayerId(ctx context.Context, in *AccountGetAccountInfoByPlayerIdRequest, opts ...grpc.CallOption) (*AccountGetAccountInfoByPlayerIdResponse, error) {
	out := new(AccountGetAccountInfoByPlayerIdResponse)
	err := c.cc.Invoke(ctx, "/databaseGrpc.AccountService/AccountGetAccountByPlayerId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	AccountFindByPhone(context.Context, *AccountFindByPhoneRequest) (*AccountFindByPhoneResponse, error)
	AccountAdd(context.Context, *AccountAddRequest) (*AccountAddResponse, error)
	AccountFindPlayerByAccountId(context.Context, *AccountFindPlayerByAccountIdRequest) (*AccountFindPlayerByAccountIdResponse, error)
	AccountGetAccountByPlayerId(context.Context, *AccountGetAccountInfoByPlayerIdRequest) (*AccountGetAccountInfoByPlayerIdResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) AccountFindByPhone(context.Context, *AccountFindByPhoneRequest) (*AccountFindByPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFindByPhone not implemented")
}
func (UnimplementedAccountServiceServer) AccountAdd(context.Context, *AccountAddRequest) (*AccountAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAdd not implemented")
}
func (UnimplementedAccountServiceServer) AccountFindPlayerByAccountId(context.Context, *AccountFindPlayerByAccountIdRequest) (*AccountFindPlayerByAccountIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFindPlayerByAccountId not implemented")
}
func (UnimplementedAccountServiceServer) AccountGetAccountByPlayerId(context.Context, *AccountGetAccountInfoByPlayerIdRequest) (*AccountGetAccountInfoByPlayerIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAccountByPlayerId not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_AccountFindByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFindByPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountFindByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseGrpc.AccountService/AccountFindByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountFindByPhone(ctx, req.(*AccountFindByPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseGrpc.AccountService/AccountAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountAdd(ctx, req.(*AccountAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountFindPlayerByAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFindPlayerByAccountIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountFindPlayerByAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseGrpc.AccountService/AccountFindPlayerByAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountFindPlayerByAccountId(ctx, req.(*AccountFindPlayerByAccountIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountGetAccountByPlayerId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountGetAccountInfoByPlayerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountGetAccountByPlayerId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/databaseGrpc.AccountService/AccountGetAccountByPlayerId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountGetAccountByPlayerId(ctx, req.(*AccountGetAccountInfoByPlayerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "databaseGrpc.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountFindByPhone",
			Handler:    _AccountService_AccountFindByPhone_Handler,
		},
		{
			MethodName: "AccountAdd",
			Handler:    _AccountService_AccountAdd_Handler,
		},
		{
			MethodName: "AccountFindPlayerByAccountId",
			Handler:    _AccountService_AccountFindPlayerByAccountId_Handler,
		},
		{
			MethodName: "AccountGetAccountByPlayerId",
			Handler:    _AccountService_AccountGetAccountByPlayerId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}
