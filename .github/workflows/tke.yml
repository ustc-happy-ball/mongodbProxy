# This workflow will build a docker container, publish and deploy it to Tencent Kubernetes Engine (TKE).
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Tencent Kubernetes Engine cluster,
#    including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace:
#    - TENCENT_CLOUD_SECRET_ID with Tencent Cloud secret id
#    - TENCENT_CLOUD_SECRET_KEY with Tencent Cloud secret key
#    - TENCENT_CLOUD_ACCOUNT_ID with Tencent Cloud account id
#    - TKE_REGISTRY_PASSWORD with TKE registry password
#
# 3. Change the values for the TKE_IMAGE_URL, TKE_REGION, TKE_CLUSTER_ID and DEPLOYMENT_NAME environment variables (below).

name: Build & Deploy

on:
  push:
    branches:
      - develop

# Environment variables available to all jobs and steps in this workflow
env:
  TKE_IMAGE_URL: hkccr.ccs.tencentyun.com/tke_cluster/tke_cluster
  TKE_REGION: ap-shanghai
  TKE_CLUSTER_ID: cls-iw9xj6c7
  DEPLOYMENT_NAME: db-srv
  NAMESPACE: dev
  NAME: db

jobs:
  go-fmt:
    name: Fmt
    runs-on: ubuntu-latest
    steps:
      - name: Fmt
        run: if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then exit 1; fi
  go-test:
    #    strategy:
    #      matrix:
    #        go-version: [ 1.14.x ]
    runs-on: ubuntu-latest
    name: Test
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: run tests
        run: CI=true go test -json ./... > test.json

      - name: Annotate tests
        if: always()
        uses: guyarb/golang-test-annotations@v0.3.0
        with:
          test-results: test.json
  setup-build-publish-deploy:
    name: Build, push and deploy to TKE
    runs-on: ubuntu-latest
    needs:
      - go-fmt
      - go-test
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      # Build
      - name: Build Docker image
        run: |
          docker build --build-arg DB_USER=${{ secrets.DB_USER }} --build-arg DB_PWD=${{ secrets.DB_PWD}} \
            --build-arg DB_HOST=${{ secrets.DB_HOST }} --build-arg DB_PORT=${{ secrets.DB_PORT }} -t ${TKE_IMAGE_URL}:${NAME}-${NAMESPACE}-${GITHUB_SHA} .

      - name: Login TKE Registry
        run: |
          docker login -u ${{ secrets.TENCENT_CLOUD_ACCOUNT_ID }} -p ${{ secrets.TKE_REGISTRY_PASSWORD }} ${TKE_IMAGE_URL}
      # Push the Docker image to TKE Registry
      - name: Publish image to TKE Registry
        run: |
          docker push ${TKE_IMAGE_URL}:${NAME}-${NAMESPACE}-${GITHUB_SHA}
      - name: Set up Kustomize
        run: |
          curl -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize
      - name: Set up ~/.kube/config for connecting TKE cluster
        uses: TencentCloud/tke-cluster-credential-action@v1
        with:
          secret_id: ${{ secrets.TENCENT_CLOUD_SECRET_ID }}
          secret_key: ${{ secrets.TENCENT_CLOUD_SECRET_KEY }}
          tke_region: ${{ env.TKE_REGION }}
          cluster_id: ${{ env.TKE_CLUSTER_ID }}
      #      - name: Creating test namespace
      #        run: |
      #          kubectl create namespace ${NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
      - name: Switch to TKE context
        run: |
          kubectl config use-context ${TKE_CLUSTER_ID}-context-default
      #          kubectl config use-context ${TKE_CLUSTER_ID}-context-default --namespace=${NAMESPACE}
      # Deploy the Docker image to the TKE cluster
      - name: Deploy To TKE
        run: |
          (cd deployments && ./../kustomize edit set image ${TKE_IMAGE_URL}:${NAME}-${NAMESPACE}-${GITHUB_SHA})
          (cd deployments && ./../kustomize build . | kubectl apply  -f - )
          kubectl rollout status deployment/${DEPLOYMENT_NAME}
          kubectl get services -o wide
